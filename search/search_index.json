{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>orderings</code>","text":"<p>Ordering enumeration and protocols.</p>"},{"location":"#installation","title":"Installation","text":"<p>Python 3.8 or above is required.</p>"},{"location":"#pip","title":"<code>pip</code>","text":"<p>Installing the library with <code>pip</code> is quite simple:</p> <pre><code>$ pip install orderings\n</code></pre> <p>Alternatively, the library can be installed from source:</p> <pre><code>$ pip install git+https://github.com/nekitdev/orderings.git\n</code></pre> <p>Or via cloning the repository:</p> <pre><code>$ git clone https://github.com/nekitdev/orderings.git\n$ cd orderings\n$ pip install .\n</code></pre>"},{"location":"#poetry","title":"<code>poetry</code>","text":"<p>You can add <code>orderings</code> as a dependency with the following command:</p> <pre><code>$ poetry add orderings\n</code></pre> <p>Or by directly specifying it in the configuration like so:</p> <pre><code>[tool.poetry.dependencies]\norderings = \"^1.6.0\"\n</code></pre> <p>Alternatively, you can add it directly from the source:</p> <pre><code>[tool.poetry.dependencies.orderings]\ngit = \"https://github.com/nekitdev/orderings.git\"\n</code></pre>"},{"location":"#motivation","title":"Motivation","text":"<p>Sometimes it's simpler to handle ordering in one method, for example when comparing iterators; then it's trivial to implement the regular ordering methods using the <code>compare</code> method.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#core","title":"Core","text":"<p>The core of <code>orderings</code> is the <code>Ordering</code> enumeration and the <code>Compare</code> protocol:</p> <pre><code>from typing import Generic, TypeVar\n\nfrom attrs import frozen\nfrom orderings import Compare, Ordered, Ordering, compare\nfrom typing_extensions import Self\n\nT = TypeVar(\"T\", bound=Ordered)\n\n\n@frozen()\nclass Wrap(Compare, Generic[T]):\n    value: T\n\n    def compare(self, other: Self) -&gt; Ordering:\n        return compare(self.value, other.value)\n</code></pre> <p><code>Compare</code> implements all ordering operations (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>) using the <code>compare</code> method.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find the documentation here.</p>"},{"location":"#support","title":"Support","text":"<p>If you need support with the library, you can send an email or refer to the official Discord server.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>You can find the changelog here.</p>"},{"location":"#security-policy","title":"Security Policy","text":"<p>You can find the Security Policy of <code>orderings</code> here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you are interested in contributing to <code>orderings</code>, make sure to take a look at the Contributing Guide, as well as the Code of Conduct.</p>"},{"location":"#license","title":"License","text":"<p><code>orderings</code> is licensed under the MIT License terms. See License for details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#150-2024-06-04","title":"1.5.0 (2024-06-04)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Added <code>PartialCompare[T]</code>, which acts similarly to <code>Compare</code>,   except it allows for comparing against defined <code>T</code>.   (#44)</li> </ul>"},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Fixed the <code>!=</code> operator implementation of <code>Compare</code>.   (#44)</li> </ul>"},{"location":"changelog/#140-2024-04-02","title":"1.4.0 (2024-04-02)","text":"<ul> <li>Added the following protocols:</li> <li><code>PartialLess[T]</code>;</li> <li><code>PartialGreater[T]</code>;</li> <li><code>PartialStrictOrdered[T]</code>;</li> <li><code>PartialLessOrEqual[T]</code>;</li> <li><code>PartialGreaterOrEqual[T]</code>;</li> <li><code>PartialLenientOrdered[T]</code>;</li> <li><code>PartialOrdered[T]</code>.</li> </ul>"},{"location":"changelog/#132-2024-03-17","title":"1.3.2 (2024-03-17)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Added the <code>is_compare</code> function to check for items that implement the <code>Compare</code> protocol.</li> </ul>"},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li>All the protocols in the library are now marked as <code>@runtime_checkable</code>.</li> </ul>"},{"location":"changelog/#131-2024-02-26","title":"1.3.1 (2024-02-26)","text":"<p>No significant changes.</p>"},{"location":"changelog/#130-2024-02-24","title":"1.3.0 (2024-02-24)","text":""},{"location":"changelog/#internal","title":"Internal","text":"<ul> <li>Dropped Python 3.7 support.</li> <li>Updated methods to use <code>(self, other: Self)</code> instead of <code>(self: T, other: T)</code>.</li> </ul>"},{"location":"changelog/#120-2023-05-21","title":"1.2.0 (2023-05-21)","text":""},{"location":"changelog/#internal_1","title":"Internal","text":"<ul> <li>Migrated to using <code>typing-aliases</code> library.</li> </ul>"},{"location":"changelog/#110-2022-11-28","title":"1.1.0 (2022-11-28)","text":""},{"location":"changelog/#fixes_1","title":"Fixes","text":"<ul> <li>Added hints for type-checkers, showing that the <code>other</code> argument can be positional.</li> </ul>"},{"location":"changelog/#100-2022-11-28","title":"1.0.0 (2022-11-28)","text":"<p>Initial release.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct.</p> <p>Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq. Translations are available at https://contributor-covenant.org/translations.</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting","title":"Reporting","text":"<p>Thank you for taking the time to responsibly disclose any problems you find.</p> <p>Do not file public issues as they are open for everyone to see!</p> <p>All security vulnerabilities in <code>orderings</code> should be reported by email to security@nekit.dev. Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report.</p> <p>You can encrypt your report using our public key: <code>6AF9DDF87B37BBE6E83F5DF2B8F5B86F98F12F5E</code>. This key is also available on MIT's Key Server and reproduced below.</p> <p>After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.</p>"},{"location":"security/#disclosure-policy","title":"Disclosure Policy","text":"<p><code>orderings</code> has a 5-step disclosure process:</p> <ol> <li> <p>The security report is received and is assigned a primary handler.    This person will coordinate the fix and release process.</p> </li> <li> <p>The problem is confirmed and a list of all affected versions is determined.</p> </li> <li> <p>Code is audited to find any potential similar problems.</p> </li> <li> <p>Fixes are prepared for all releases which are still under maintenance.    These fixes are not committed to the public repository but rather    held locally pending the announcement.</p> </li> <li> <p>On the embargo date, the changes are pushed to the public repository    and new builds are deployed.</p> </li> </ol> <p>This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.</p>"},{"location":"security/#security-key","title":"Security Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\npbmAGLbBB2TBok4=\n=Ir8m\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"security/#attribution","title":"Attribution","text":"<p>This Security Policy is adapted from Rust's Security Policy.</p>"},{"location":"reference/core/","title":"Core","text":""},{"location":"reference/core/#orderings.core.Ordering","title":"<code>Ordering</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents ordering.</p> Source code in <code>orderings/core.py</code> <pre><code>class Ordering(Enum):\n    \"\"\"Represents ordering.\"\"\"\n\n    LESS = -1\n    \"\"\"The left item is *less* than the right item.\"\"\"\n\n    EQUAL = 0\n    \"\"\"The left item is *equal* to the right item.\"\"\"\n\n    GREATER = 1\n    \"\"\"The left item is *greater* than the right item.\"\"\"\n\n    def is_less(self) -&gt; bool:\n        \"\"\"Checks if the ordering is [`LESS`][orderings.core.Ordering.LESS].\n\n        Returns:\n            Whether the ordering is [`LESS`][orderings.core.Ordering.LESS].\n        \"\"\"\n        return self is type(self).LESS\n\n    def is_equal(self) -&gt; bool:\n        \"\"\"Checks if the ordering is [`EQUAL`][orderings.core.Ordering.EQUAL].\n\n        Returns:\n            Whether the ordering is [`EQUAL`][orderings.core.Ordering.EQUAL].\n        \"\"\"\n        return self is type(self).EQUAL\n\n    def is_greater(self) -&gt; bool:\n        \"\"\"Checks if the ordering is [`GREATER`][orderings.core.Ordering.GREATER].\n\n        Returns:\n            Whether the ordering is [`GREATER`][orderings.core.Ordering.GREATER].\n        \"\"\"\n        return self is type(self).GREATER\n\n    def is_less_or_equal(self) -&gt; bool:\n        \"\"\"Checks if the ordering is [`LESS`][orderings.core.Ordering.LESS] or\n        [`EQUAL`][orderings.core.Ordering.EQUAL].\n        This is equivalent to:\n\n        ```python\n        ordering.is_less() or ordering.is_equal()\n        ```\n\n        Returns:\n            Whether the ordering is [`LESS`][orderings.core.Ordering.LESS]\n                or [`EQUAL`][orderings.core.Ordering.EQUAL].\n        \"\"\"\n        return self.is_less() or self.is_equal()\n\n    def is_not_equal(self) -&gt; bool:\n        \"\"\"Checks if the ordering is not [`EQUAL`][orderings.core.Ordering.EQUAL].\n        This is equivalent to:\n\n        ```python\n        not ordering.is_equal()\n        ```\n\n        Returns:\n            Whether the ordering is not [`EQUAL`][orderings.core.Ordering.EQUAL].\n        \"\"\"\n        return not self.is_equal()\n\n    def is_greater_or_equal(self) -&gt; bool:\n        \"\"\"Checks if the ordering is [`GREATER`][orderings.core.Ordering.GREATER] or\n        [`EQUAL`][orderings.core.Ordering.EQUAL].\n        This is equivalent to:\n\n        ```python\n        ordering.is_greater() or ordering.is_equal()\n        ```\n\n        Returns:\n            Whether the ordering is [`GREATER`][orderings.core.Ordering.GREATER]\n                or [`EQUAL`][orderings.core.Ordering.EQUAL].\n        \"\"\"\n        return self.is_greater() or self.is_equal()\n</code></pre>"},{"location":"reference/core/#orderings.core.Ordering.LESS","title":"<code>LESS = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The left item is less than the right item.</p>"},{"location":"reference/core/#orderings.core.Ordering.EQUAL","title":"<code>EQUAL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The left item is equal to the right item.</p>"},{"location":"reference/core/#orderings.core.Ordering.GREATER","title":"<code>GREATER = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The left item is greater than the right item.</p>"},{"location":"reference/core/#orderings.core.Ordering.is_less","title":"<code>is_less() -&gt; bool</code>","text":"<p>Checks if the ordering is <code>LESS</code>.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the ordering is <code>LESS</code>.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_less(self) -&gt; bool:\n    \"\"\"Checks if the ordering is [`LESS`][orderings.core.Ordering.LESS].\n\n    Returns:\n        Whether the ordering is [`LESS`][orderings.core.Ordering.LESS].\n    \"\"\"\n    return self is type(self).LESS\n</code></pre>"},{"location":"reference/core/#orderings.core.Ordering.is_equal","title":"<code>is_equal() -&gt; bool</code>","text":"<p>Checks if the ordering is <code>EQUAL</code>.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the ordering is <code>EQUAL</code>.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_equal(self) -&gt; bool:\n    \"\"\"Checks if the ordering is [`EQUAL`][orderings.core.Ordering.EQUAL].\n\n    Returns:\n        Whether the ordering is [`EQUAL`][orderings.core.Ordering.EQUAL].\n    \"\"\"\n    return self is type(self).EQUAL\n</code></pre>"},{"location":"reference/core/#orderings.core.Ordering.is_greater","title":"<code>is_greater() -&gt; bool</code>","text":"<p>Checks if the ordering is <code>GREATER</code>.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the ordering is <code>GREATER</code>.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_greater(self) -&gt; bool:\n    \"\"\"Checks if the ordering is [`GREATER`][orderings.core.Ordering.GREATER].\n\n    Returns:\n        Whether the ordering is [`GREATER`][orderings.core.Ordering.GREATER].\n    \"\"\"\n    return self is type(self).GREATER\n</code></pre>"},{"location":"reference/core/#orderings.core.Ordering.is_less_or_equal","title":"<code>is_less_or_equal() -&gt; bool</code>","text":"<p>Checks if the ordering is <code>LESS</code> or <code>EQUAL</code>. This is equivalent to:</p> <pre><code>ordering.is_less() or ordering.is_equal()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the ordering is <code>LESS</code> or <code>EQUAL</code>.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_less_or_equal(self) -&gt; bool:\n    \"\"\"Checks if the ordering is [`LESS`][orderings.core.Ordering.LESS] or\n    [`EQUAL`][orderings.core.Ordering.EQUAL].\n    This is equivalent to:\n\n    ```python\n    ordering.is_less() or ordering.is_equal()\n    ```\n\n    Returns:\n        Whether the ordering is [`LESS`][orderings.core.Ordering.LESS]\n            or [`EQUAL`][orderings.core.Ordering.EQUAL].\n    \"\"\"\n    return self.is_less() or self.is_equal()\n</code></pre>"},{"location":"reference/core/#orderings.core.Ordering.is_not_equal","title":"<code>is_not_equal() -&gt; bool</code>","text":"<p>Checks if the ordering is not <code>EQUAL</code>. This is equivalent to:</p> <pre><code>not ordering.is_equal()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the ordering is not <code>EQUAL</code>.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_not_equal(self) -&gt; bool:\n    \"\"\"Checks if the ordering is not [`EQUAL`][orderings.core.Ordering.EQUAL].\n    This is equivalent to:\n\n    ```python\n    not ordering.is_equal()\n    ```\n\n    Returns:\n        Whether the ordering is not [`EQUAL`][orderings.core.Ordering.EQUAL].\n    \"\"\"\n    return not self.is_equal()\n</code></pre>"},{"location":"reference/core/#orderings.core.Ordering.is_greater_or_equal","title":"<code>is_greater_or_equal() -&gt; bool</code>","text":"<p>Checks if the ordering is <code>GREATER</code> or <code>EQUAL</code>. This is equivalent to:</p> <pre><code>ordering.is_greater() or ordering.is_equal()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the ordering is <code>GREATER</code> or <code>EQUAL</code>.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_greater_or_equal(self) -&gt; bool:\n    \"\"\"Checks if the ordering is [`GREATER`][orderings.core.Ordering.GREATER] or\n    [`EQUAL`][orderings.core.Ordering.EQUAL].\n    This is equivalent to:\n\n    ```python\n    ordering.is_greater() or ordering.is_equal()\n    ```\n\n    Returns:\n        Whether the ordering is [`GREATER`][orderings.core.Ordering.GREATER]\n            or [`EQUAL`][orderings.core.Ordering.EQUAL].\n    \"\"\"\n    return self.is_greater() or self.is_equal()\n</code></pre>"},{"location":"reference/core/#orderings.core.PartialCompare","title":"<code>PartialCompare</code>","text":"<p>               Bases: <code>PartialOrdered[T]</code>, <code>Protocol[T]</code></p> <p>Implements partial ordering via delegation to the <code>partial_compare</code> method.</p> Note <p>Please note that this protocol does not implement equality methods.</p> Source code in <code>orderings/core.py</code> <pre><code>@runtime_checkable\nclass PartialCompare(PartialOrdered[T], Protocol[T]):\n    \"\"\"Implements partial ordering via delegation to the\n    [`partial_compare`][orderings.core.PartialCompare.partial_compare] method.\n\n    Note:\n        Please note that this protocol does not implement equality methods.\n    \"\"\"\n\n    @required\n    def partial_compare(self, value: T) -&gt; Ordering:\n        \"\"\"Defines partial ordering via the [`Ordering`][orderings.core.Ordering] enumeration.\"\"\"\n        ...\n\n    def __lt__(self, value: T) -&gt; bool:\n        return self.partial_compare(value).is_less()\n\n    def __gt__(self, value: T) -&gt; bool:\n        return self.partial_compare(value).is_greater()\n\n    def __le__(self, value: T) -&gt; bool:\n        return self.partial_compare(value).is_less_or_equal()\n\n    def __ge__(self, value: T) -&gt; bool:\n        return self.partial_compare(value).is_greater_or_equal()\n</code></pre>"},{"location":"reference/core/#orderings.core.PartialCompare.partial_compare","title":"<code>partial_compare(value: T) -&gt; Ordering</code>","text":"<p>Defines partial ordering via the <code>Ordering</code> enumeration.</p> Source code in <code>orderings/core.py</code> <pre><code>@required\ndef partial_compare(self, value: T) -&gt; Ordering:\n    \"\"\"Defines partial ordering via the [`Ordering`][orderings.core.Ordering] enumeration.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/core/#orderings.core.Compare","title":"<code>Compare</code>","text":"<p>               Bases: <code>Ordered</code>, <code>Protocol</code></p> <p>Implements total ordering via delegation to the <code>compare</code> method.</p> Source code in <code>orderings/core.py</code> <pre><code>@runtime_checkable\nclass Compare(Ordered, Protocol):\n    \"\"\"Implements total ordering via delegation to the\n    [`compare`][orderings.core.Compare.compare] method.\n    \"\"\"\n\n    @required\n    def compare(self, other: Self) -&gt; Ordering:\n        \"\"\"Defines ordering via the [`Ordering`][orderings.core.Ordering] enumeration.\"\"\"\n        ...\n\n    def __lt__(self, other: Self) -&gt; bool:\n        return self.compare(other).is_less()\n\n    def __gt__(self, other: Self) -&gt; bool:\n        return self.compare(other).is_greater()\n\n    def __le__(self, other: Self) -&gt; bool:\n        return self.compare(other).is_less_or_equal()\n\n    def __ge__(self, other: Self) -&gt; bool:\n        return self.compare(other).is_greater_or_equal()\n\n    def __eq__(self, other: Any) -&gt; bool:\n        return is_same_or_sub_type(other, self) and self.compare(other).is_equal()\n\n    def __ne__(self, other: Any) -&gt; bool:\n        return not is_same_or_sub_type(other, self) or self.compare(other).is_not_equal()\n</code></pre>"},{"location":"reference/core/#orderings.core.Compare.compare","title":"<code>compare(other: Self) -&gt; Ordering</code>","text":"<p>Defines ordering via the <code>Ordering</code> enumeration.</p> Source code in <code>orderings/core.py</code> <pre><code>@required\ndef compare(self, other: Self) -&gt; Ordering:\n    \"\"\"Defines ordering via the [`Ordering`][orderings.core.Ordering] enumeration.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/core/#orderings.core.is_compare","title":"<code>is_compare(item: Any) -&gt; TypeIs[Compare]</code>","text":"<p>Checks if the <code>item</code> implements the <code>Compare</code> protocol.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeIs[Compare]</code> <p>Whether the <code>item</code> implements the <code>Compare</code> protocol.</p> Source code in <code>orderings/core.py</code> <pre><code>def is_compare(item: Any) -&gt; TypeIs[Compare]:\n    \"\"\"Checks if the `item` implements the [`Compare`][orderings.core.Compare] protocol.\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the `item` implements the [`Compare`][orderings.core.Compare] protocol.\n    \"\"\"\n    return is_instance(item, Compare)\n</code></pre>"},{"location":"reference/core/#orderings.core.compare","title":"<code>compare(left: PartialOrdered[T], right: T) -&gt; Ordering</code>","text":"<p>Compares <code>left</code> and <code>right</code>, returning <code>Ordering</code>.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>PartialOrdered[T]</code> <p>The left value.</p> required <code>right</code> <code>T</code> <p>The right value.</p> required <p>Returns:</p> Type Description <code>Ordering</code> <p>The result.</p> Source code in <code>orderings/core.py</code> <pre><code>def compare(left: PartialOrdered[T], right: T) -&gt; Ordering:\n    \"\"\"Compares `left` and `right`, returning [`Ordering`][orderings.core.Ordering].\n\n    Arguments:\n        left: The left value.\n        right: The right value.\n\n    Returns:\n        The result.\n    \"\"\"\n    if left &lt; right:\n        return Ordering.LESS\n\n    if left &gt; right:\n        return Ordering.GREATER\n\n    return Ordering.EQUAL\n</code></pre>"},{"location":"reference/typing/","title":"Typing","text":""},{"location":"reference/typing/#orderings.typing.PartialLess","title":"<code>PartialLess</code>","text":"<p>               Bases: <code>Protocol[T]</code></p> <p>Represents types that implement the less operation (<code>self &lt; other</code>) where <code>other</code> is of type <code>T</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialLess(Protocol[T]):\n    \"\"\"Represents types that implement the *less* operation (`self &lt; other`)\n    where `other` is of type `T`.\n    \"\"\"\n\n    @required\n    def __lt__(self, __other: T) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.Less","title":"<code>Less</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Represents types that implement the less operation (<code>self &lt; other</code>) where <code>other</code> is of type <code>Self</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass Less(Protocol):\n    \"\"\"Represents types that implement the *less* operation (`self &lt; other`)\n    where `other` is of type `Self`.\n    \"\"\"\n\n    @required\n    def __lt__(self, __other: Self) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.PartialGreater","title":"<code>PartialGreater</code>","text":"<p>               Bases: <code>Protocol[T]</code></p> <p>Represents types that implement the greater operation (<code>self &gt; other</code>) where <code>other</code> is of type <code>T</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialGreater(Protocol[T]):\n    \"\"\"Represents types that implement the *greater* operation (`self &gt; other`)\n    where `other` is of type `T`.\n    \"\"\"\n\n    @required\n    def __gt__(self, __other: T) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.Greater","title":"<code>Greater</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Represents types that implement the greater operation (<code>self &gt; other</code>) where <code>other</code> is of type <code>Self</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass Greater(Protocol):\n    \"\"\"Represents types that implement the *greater* operation (`self &gt; other`)\n    where `other` is of type `Self`.\n    \"\"\"\n\n    @required\n    def __gt__(self, __other: Self) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.PartialStrictOrdered","title":"<code>PartialStrictOrdered</code>","text":"<p>               Bases: <code>PartialLess[T]</code>, <code>PartialGreater[T]</code>, <code>Protocol[T]</code></p> <p>Represents types that implement both <code>PartialLess[T]</code> and <code>PartialGreater[T]</code> protocols.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialStrictOrdered(PartialLess[T], PartialGreater[T], Protocol[T]):\n    \"\"\"Represents types that implement both [`PartialLess[T]`][orderings.typing.PartialLess]\n    and [`PartialGreater[T]`][orderings.typing.PartialGreater] protocols.\n    \"\"\"\n</code></pre>"},{"location":"reference/typing/#orderings.typing.StrictOrdered","title":"<code>StrictOrdered</code>","text":"<p>               Bases: <code>Less</code>, <code>Greater</code>, <code>Protocol</code></p> <p>Represents types that implement both <code>Less</code> and <code>Greater</code> protocols.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass StrictOrdered(Less, Greater, Protocol):\n    \"\"\"Represents types that implement both [`Less`][orderings.typing.Less]\n    and [`Greater`][orderings.typing.Greater] protocols.\n    \"\"\"\n</code></pre>"},{"location":"reference/typing/#orderings.typing.PartialLessOrEqual","title":"<code>PartialLessOrEqual</code>","text":"<p>               Bases: <code>Protocol[T]</code></p> <p>Represents types that implement the less-or-equal operation (<code>self &lt;= other</code>) where <code>other</code> is of type <code>T</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialLessOrEqual(Protocol[T]):\n    \"\"\"Represents types that implement the *less-or-equal* operation (`self &lt;= other`)\n    where `other` is of type `T`.\n    \"\"\"\n\n    @required\n    def __le__(self, __other: T) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.LessOrEqual","title":"<code>LessOrEqual</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Represents types that implement the less-or-equal operation (<code>self &lt;= other</code>) where <code>other</code> is of type <code>Self</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass LessOrEqual(Protocol):\n    \"\"\"Represents types that implement the *less-or-equal* operation (`self &lt;= other`)\n    where `other` is of type `Self`.\n    \"\"\"\n\n    @required\n    def __le__(self, __other: Self) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.PartialGreaterOrEqual","title":"<code>PartialGreaterOrEqual</code>","text":"<p>               Bases: <code>Protocol[T]</code></p> <p>Represents types that implement the greater-or-equal operation (<code>self &gt;= other</code>) where <code>other</code> is of type <code>T</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialGreaterOrEqual(Protocol[T]):\n    \"\"\"Represents types that implement the *greater-or-equal* operation (`self &gt;= other`)\n    where `other` is of type `T`.\n    \"\"\"\n\n    @required\n    def __ge__(self, __other: T) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.GreaterOrEqual","title":"<code>GreaterOrEqual</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Represents types that implement the greater-or-equal operation (<code>self &gt;= other</code>) where <code>other</code> is of type <code>Self</code>.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass GreaterOrEqual(Protocol):\n    \"\"\"Represents types that implement the *greater-or-equal* operation (`self &gt;= other`)\n    where `other` is of type `Self`.\n    \"\"\"\n\n    @required\n    def __ge__(self, __other: Self) -&gt; bool: ...\n</code></pre>"},{"location":"reference/typing/#orderings.typing.PartialLenientOrdered","title":"<code>PartialLenientOrdered</code>","text":"<p>               Bases: <code>PartialLessOrEqual[T]</code>, <code>PartialGreaterOrEqual[T]</code>, <code>Protocol[T]</code></p> <p>Represents types that implement both <code>PartialLessOrEqual[T]</code> and <code>PartialGreaterOrEqual[T]</code> protocols.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialLenientOrdered(PartialLessOrEqual[T], PartialGreaterOrEqual[T], Protocol[T]):\n    \"\"\"Represents types that implement both\n    [`PartialLessOrEqual[T]`][orderings.typing.PartialLessOrEqual] and\n    [`PartialGreaterOrEqual[T]`][orderings.typing.PartialGreaterOrEqual] protocols.\n    \"\"\"\n</code></pre>"},{"location":"reference/typing/#orderings.typing.LenientOrdered","title":"<code>LenientOrdered</code>","text":"<p>               Bases: <code>LessOrEqual</code>, <code>GreaterOrEqual</code>, <code>Protocol</code></p> <p>Represents types that implement both <code>LessOrEqual</code> and <code>GreaterOrEqual</code> protocols.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass LenientOrdered(LessOrEqual, GreaterOrEqual, Protocol):\n    \"\"\"Represents types that implement both [`LessOrEqual`][orderings.typing.LessOrEqual]\n    and [`GreaterOrEqual`][orderings.typing.GreaterOrEqual] protocols.\n    \"\"\"\n</code></pre>"},{"location":"reference/typing/#orderings.typing.PartialOrdered","title":"<code>PartialOrdered</code>","text":"<p>               Bases: <code>PartialStrictOrdered[T]</code>, <code>PartialLenientOrdered[T]</code>, <code>Protocol[T]</code></p> <p>Represents types that implement both <code>PartialStrictOrdered[T]</code> and <code>PartialLenientOrdered[T]</code> protocols.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass PartialOrdered(PartialStrictOrdered[T], PartialLenientOrdered[T], Protocol[T]):\n    \"\"\"Represents types that implement both\n    [`PartialStrictOrdered[T]`][orderings.typing.PartialStrictOrdered] and\n    [`PartialLenientOrdered[T]`][orderings.typing.PartialLenientOrdered] protocols.\n    \"\"\"\n</code></pre>"},{"location":"reference/typing/#orderings.typing.Ordered","title":"<code>Ordered</code>","text":"<p>               Bases: <code>StrictOrdered</code>, <code>LenientOrdered</code>, <code>Protocol</code></p> <p>Represents types that implement both <code>StrictOrdered</code> and <code>LenientOrdered</code> protocols.</p> Source code in <code>orderings/typing.py</code> <pre><code>@runtime_checkable\nclass Ordered(StrictOrdered, LenientOrdered, Protocol):\n    \"\"\"Represents types that implement both [`StrictOrdered`][orderings.typing.StrictOrdered]\n    and [`LenientOrdered`][orderings.typing.LenientOrdered] protocols.\n    \"\"\"\n</code></pre>"}]}